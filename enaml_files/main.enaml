from enaml.layout.api import vbox, hbox, spacer
from enaml.widgets.api import (
    Window, Container, MPLCanvas, CheckBox, ComboBox, PushButton, Label, 
    Field, FileDialogEx, ScrollArea, Separator, MainWindow, MenuBar, Menu, Action, ActionGroup
)
from enaml.core.api import Conditional, Looper
from enaml.stdlib.fields import IntField


from enaml_files.figure import FigDisplay
from enaml_files.layout import VContainer, HContainer
from enaml_files.mbar import MBar
from enaml_files.data_view import DataView

from depth_control_widget import DepthControl
from atom.api import ContainerList


# Temp import from model
import sys
import settings
sys.path.insert(0, settings.core_path)
import core
from core.model import *
sys.path.pop(0)


enamldef Main(MainWindow): main:
    title = 'Bamboo'
    attr main_src
    attr app_params
    attr main_figures

    initial_size = (800, 600)

    MBar:
        params = app_params

        settings.triggered ::
            for figures in main_figures:
                for fig in figures.models:
                    fig.height = app_params.fig_height

    Container:
        constraints = [
            vbox(
                hbox(path_lb, path_fld, load_src),
                hbox(view_lb, view_add, view_remove),
                views
            )
        ]

        # Directory display
        Label: path_lb:
            text = 'Current directory:'
        Field: path_fld:
            text << main_src.d.path
            read_only = True
        PushButton: load_src:
            text = 'Load New'
            clicked ::
                src_dir = FileDialogEx.get_existing_directory()
                if src_dir:
                    # Update source
                    main_src.initialize(src_dir)

                    # Reinitialize UI elements
                    figures = FigureModels()
                    figures.models = [main_src.gen_fig_model('null')]
                    main.main_figures = [figures]

        # View controls
        Label: view_lb:
            text = 'View controls:'
        PushButton: view_add:
            hug_width = 'strong'
            text = 'Add view'
            clicked ::
                figures = FigureModels()
                figures.models = [main_src.gen_fig_model('null')]
                main.main_figures = main.main_figures + [figures]
        PushButton: view_remove:
            hug_width = 'strong'
            text = 'Remove view'
            clicked ::
                if main.main_figures:
                    main.main_figures = main.main_figures[:-1]

        HContainer: views:
            Looper:
                iterable << main_figures
                Conditional:
                    condition << isinstance(loop_item, FigureModels)
                    DataView: data_view:
                        src = main_src
                        figures = loop_item